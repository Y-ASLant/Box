name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: mac

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Cache Electron binaries
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install dependencies
        run: |
          npm install
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libxss1 \
            libasound2-dev \
            libgtk-3-dev \
            libxss1 \
            libasound2t64 \
            libatspi2.0-0 \
            libsecret-1-0

      - name: Verify Electron installation
        run: |
          npx electron --version || echo "Electron not found, will be downloaded during build"

      - name: Build Electron app (Windows)
        if: matrix.platform == 'win'
        run: |
          npm run build:win || npm run build:electron-no-check -- --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

      - name: Build Electron app (macOS)
        if: matrix.platform == 'mac'
        run: |
          npm run build:mac || npm run build:electron-no-check -- --mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build Electron app (Linux)
        if: matrix.platform == 'linux'
        run: |
          npm run build:linux || npm run build:electron-no-check -- --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: ~/.cache/electron
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

      - name: List build output
        run: |
          echo "Build directory contents:"
          ls -la build/ || echo "Build directory not found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: box-${{ matrix.platform }}
          path: |
            build/*.exe
            build/*.dmg
            build/*.AppImage
            build/*.deb
            build/*.rpm
            build/*.zip
            build/*.tar.gz
            build/*Setup*.exe
            build/*.pkg
          retention-days: 30
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
